FSM Sparse Compact C Template
This template defines the format of the C file for the compact sparse FSM engine.

The following FSM variable names are valid and may be defined in the
configuration section of the state machine definition (using __FSM_VAR()):

    Variable            Description
    --------            -----------
    StatePrefix         Used to prefix all state names
    EventPrefix         Used to prefix all event names
    ActionNumPrefix     Used to prefix all action function index #defines
    ActionFnPrefix      Used to prefix all action function names
    ConstQualifier      Additional qualifier(s) for constant static data


__FSM_START
/*!
        Copyright (C) CCL, CSR plc 2008
        All rights reserved

\file   __FSM_NAME_LOWER_fsm_constants.c

\brief  FSM constants.
        Contains code generated by __FSM_TOOL_NAME, version __FSM_TOOL_VERSION
*/

#include "__FSM_NAME_LOWER_fsm_definitions.h"

/* Action function table */
__FSM_MARKER(ACTION_FN_TABLE)
__FSM_VAR(ConstQualifier)
static const fsm_action_fn_t __FSM_NAME_LOWER_action_fns[] =
{
__FSM_FOR_ACTIONS
    __FSM_VAR(ActionFnPrefix)__FSM_ACTION_NAME_LOWER,
__FSM_END_FOR
};
#ifdef CONFIG_DEBUG_WLAN_API_DEBUG
#define FSM_DEBUG_NAMES 1
#endif
#if defined(FSM_DEBUG_NAMES)
__FSM_FOR_ACTIONS
__FSM_VAR(ConstQualifier)
static const char action___FSM_NAME_LOWER___FSM_ACTION_NAME_LOWER_str[] = \
                  "__FSM_VAR(ActionFnPrefix)__FSM_ACTION_NAME_LOWER";

__FSM_END_FOR

__FSM_VAR(ConstQualifier)
const char *const __FSM_VAR(ActionFnPrefix)__FSM_NAME_LOWER_action_names[] =
{
__FSM_FOR_ACTIONS
    (const char *) action___FSM_NAME_LOWER___FSM_ACTION_NAME_LOWER_str,
__FSM_END_FOR
};
__FSM_END_MARKER
#define __FSM_NAME_UPPER_ACTION_NAMES_PTR (__FSM_VAR(ActionFnPrefix)__FSM_NAME_LOWER_action_names)
#else
#define __FSM_NAME_UPPER_ACTION_NAMES_PTR (NULL)
#endif

/*
 * Actions-per-state initialisation code
 * Format:
 *      Event, Action index, Next state
 */

__FSM_MARKER(STATE_TABLES)
__FSM_VAR(ConstQualifier)
static const FSM_SPARSE16_TRANSITION_T __FSM_NAME_LOWER_transitions[] = {
__FSM_SET_VAR(StateSep, "")
__FSM_FOR_STATES
__FSM_VAR(StateSep)__FSM_NO_NEWLINE
__FSM_SET_VAR(StateSep, "")
  /* __FSM_STATE_NAME */
__FSM_FOR_EVENTS
__FSM_SKIP_EMPTY_TRANSITIONS
__FSM_VAR(StateSep)__FSM_NO_NEWLINE
  { BUILD_TRANSITION16(__FSM_VAR(EventPrefix)__FSM_EVENT_NAME_UPPER,  __FSM_PAD_EVENT __FSM_VAR(ActionNumPrefix)__FSM_ACTION_NAME, __FSM_PAD_ACTION __FSM_VAR(StatePrefix)__FSM_NEXT_STATE) }__FSM_NO_NEWLINE
__FSM_SET_VAR(StateSep, ",\n")
__FSM_END_FOR
__FSM_END_FOR

};
__FSM_END_MARKER

/* State array declarations */
__FSM_MARKER(STATE_ARRAY)
__FSM_VAR(ConstQualifier)
static const FSM_SPARSE16_STATES_T __FSM_NAME_LOWER_states[__FSM_VAR(StatePrefix)ST_MAX+1] = {
__FSM_SET_VAR(EventIndex, 0)
__FSM_FOR_STATES
    { &__FSM_NAME_LOWER_transitions[__FSM_VAR(EventIndex)] },
__FSM_FOR_EVENTS
__FSM_SKIP_EMPTY_TRANSITIONS
__FSM_INC_VAR(EventIndex)
__FSM_END_FOR
__FSM_END_FOR
    { &__FSM_NAME_LOWER_transitions[__FSM_VAR(EventIndex)] },
};
__FSM_END_MARKER

/* FSM logging definitions */
#if defined(FSM_DEBUG_NAMES)
__FSM_MARKER(FSM_LOGGING)
/* State names */
__FSM_FOR_STATES
MXLOG_STRING(state___FSM_STATE_NAME_LOWER_str, "__FSM_VAR(StatePrefix)__FSM_STATE_NAME_UPPER");

__FSM_END_FOR

__FSM_VAR(ConstQualifier)
const char *const __FSM_NAME_LOWER_state_names[] =
{
__FSM_FOR_STATES
    (const char *) state___FSM_STATE_NAME_LOWER_str,
__FSM_END_FOR
};
#define __FSM_NAME_UPPER_STATE_NAMES_PTR (__FSM_NAME_LOWER_state_names)

/* Event names */
__FSM_FOR_EVENT_STR
MXLOG_STRING(event___FSM_LOG_EVENT_NAME_LOWER_str, "__FSM_VAR(EventPrefix)__FSM_LOG_EVENT_NAME_UPPER");

__FSM_END_FOR

__FSM_VAR(ConstQualifier)
const char *const __FSM_NAME_LOWER_event_names[] =
{
__FSM_FOR_EVENT_LOGS
    (const char *) event___FSM_LOG_EVENT_NAME_LOWER_str,
__FSM_END_FOR
};
#define __FSM_NAME_UPPER_EVENT_NAMES_PTR (__FSM_NAME_LOWER_event_names)

__FSM_END_MARKER
#else
#define __FSM_NAME_UPPER_STATE_NAMES_PTR (NULL)
#define __FSM_NAME_UPPER_EVENT_NAMES_PTR (NULL)
#endif

/* State machine definition */
#ifdef FSM_NAME_LOGGING
MXLOG_STRING(__FSM_NAME_LOWER_str, "__FSM_NAME");
#else
#define __FSM_NAME_LOWER_str
#endif

__FSM_MARKER(FSM_DEFINITION)
__FSM_VAR(ConstQualifier)
const FSM_SPARSE16_DEFINITION_T __FSM_NAME_LOWER_fsm =
{
    (const FSM_SPARSE16_STATES_T *) __FSM_NAME_LOWER_states,
    __FSM_NAME_LOWER_action_fns
    FSM_LOG_INFO(__FSM_NAME_LOWER_str,
                 __FSM_NAME_UPPER_ACTION_NAMES_PTR,
                 __FSM_NAME_UPPER_STATE_NAMES_PTR,
                 __FSM_NAME_UPPER_EVENT_NAMES_PTR)
};
__FSM_END_MARKER

COMPILE_TIME_ASSERT(1<<TRANSITION16_NEW_STATE_BITS >= __FSM_VAR(Stateprefix)ST_MAX, new_state_bits_overflow);
COMPILE_TIME_ASSERT(1<<TRANSITION16_ACTION_BITS >= __FSM_VAR(ActionNumPrefix)MAX, action_bits_overflow);

__FSM_END
