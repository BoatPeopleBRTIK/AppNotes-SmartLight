From 2966bc3cbff3435b2b9411f0e02b439d443b7fd4 Mon Sep 17 00:00:00 2001
From: Jihun Ahn <jhun.ahn@samsung.com>
Date: Fri, 29 Dec 2017 21:09:36 +0900
Subject: [PATCH] cortex_a: allow setting debug and memory ap

This commit adds a Cortex-A and Cortex-R4 private configuration options
that allow setting the debug and memory access point during target
creation. This circumvents situations in the systems when the correct
access point can not be detected or is not available at the creation
time.

Signed-off-by: Jihun Ahn <jhun.ahn@samsung.com>
---
 src/target/arm_adi_v5.c | 43 +++++++++++++++++++++++++++
 src/target/arm_adi_v5.h |  8 +++++
 src/target/cortex_a.c   | 77 ++++++++++++++++++++++++++++++++++++++++---------
 src/target/cortex_a.h   |  2 ++
 src/target/target.c     |  1 +
 src/target/target.h     |  1 +
 6 files changed, 118 insertions(+), 14 deletions(-)

diff --git a/src/target/arm_adi_v5.c b/src/target/arm_adi_v5.c
index f7e58d0..c9ab0ed 100644
--- a/src/target/arm_adi_v5.c
+++ b/src/target/arm_adi_v5.c
@@ -819,6 +819,7 @@ int dap_find_ap(struct adiv5_dap *dap, enum ap_type type_to_find, uint8_t *ap_nu
 			LOG_DEBUG("Found %s at AP index: %d (IDR=0x%08" PRIX32 ")",
 						(type_to_find == AP_TYPE_AHB_AP)  ? "AHB-AP"  :
 						(type_to_find == AP_TYPE_APB_AP)  ? "APB-AP"  :
+						(type_to_find == AP_TYPE_AXI_AP)  ? "AXI-AP"  :
 						(type_to_find == AP_TYPE_JTAG_AP) ? "JTAG-AP" : "Unknown",
 						ap, id_val);
 
@@ -830,6 +831,7 @@ int dap_find_ap(struct adiv5_dap *dap, enum ap_type type_to_find, uint8_t *ap_nu
 	LOG_DEBUG("No %s found",
 				(type_to_find == AP_TYPE_AHB_AP)  ? "AHB-AP"  :
 				(type_to_find == AP_TYPE_APB_AP)  ? "APB-AP"  :
+				(type_to_find == AP_TYPE_AXI_AP)  ? "AXI-AP"  :
 				(type_to_find == AP_TYPE_JTAG_AP) ? "JTAG-AP" : "Unknown");
 	return ERROR_FAIL;
 }
@@ -1448,6 +1450,47 @@ static int dap_info_command(struct command_context *cmd_ctx,
 	return ERROR_OK;
 }
 
+int adiv5_jim_configure(struct target *target, Jim_GetOptInfo *goi)
+{
+	struct adiv5_private_config *pc;
+	const char *arg;
+	jim_wide ap_num;
+	int e;
+
+	/* check if argv[0] is for us */
+	arg = Jim_GetString(goi->argv[0], NULL);
+	if (strcmp(arg, "-ap-num") && strcmp(arg, "-memap-num"))
+		return JIM_CONTINUE;
+
+	if (target->private_config == NULL) {
+		pc = calloc(1, sizeof(struct adiv5_private_config));
+		target->private_config = pc;
+		pc->ap_num = -1;
+		pc->memap_num = -1;
+	} else
+		pc = target->private_config;
+
+	e = Jim_GetOpt_String(goi, (char **)&arg, NULL);
+	if (e != JIM_OK)
+		return e;
+
+	if (goi->argc == 0) {
+		Jim_WrongNumArgs(goi->interp, goi->argc, goi->argv, "-ap-num ?ap-number? ...");
+		return JIM_ERR;
+	}
+
+	e = Jim_GetOpt_Wide(goi, &ap_num);
+	if (e != JIM_OK)
+		return e;
+
+	if (strcmp(arg, "-ap-num") == 0)
+		pc->ap_num = ap_num;
+	else if (strcmp(arg, "-memap-num") == 0)
+		pc->memap_num = ap_num;
+
+	return JIM_OK;
+}
+
 COMMAND_HANDLER(handle_dap_info_command)
 {
 	struct target *target = get_current_target(CMD_CTX);
diff --git a/src/target/arm_adi_v5.h b/src/target/arm_adi_v5.h
index 8d12608..9ca6c0c 100644
--- a/src/target/arm_adi_v5.h
+++ b/src/target/arm_adi_v5.h
@@ -261,6 +261,7 @@ struct dap_ops {
 enum ap_type {
 	AP_TYPE_AHB_AP  = 0x01,  /* AHB Memory-AP */
 	AP_TYPE_APB_AP  = 0x02,  /* APB Memory-AP */
+	AP_TYPE_AXI_AP  = 0x04,  /* AXI Memory-AP */
 	AP_TYPE_JTAG_AP = 0x10   /* JTAG-AP - JTAG master for controlling other JTAG devices */
 };
 
@@ -488,4 +489,11 @@ int dap_to_jtag(struct target *target);
 
 extern const struct command_registration dap_command_handlers[];
 
+struct adiv5_private_config {
+	int ap_num;
+	int memap_num;
+};
+
+extern int adiv5_jim_configure(struct target *target, Jim_GetOptInfo *goi);
+
 #endif
diff --git a/src/target/cortex_a.c b/src/target/cortex_a.c
index 3d844d2..c97a9dd 100644
--- a/src/target/cortex_a.c
+++ b/src/target/cortex_a.c
@@ -2879,23 +2879,39 @@ static int cortex_a_examine_first(struct target *target)
 	if (retval != ERROR_OK)
 		return retval;
 
-	/* Search for the APB-AB - it is needed for access to debug registers */
-	retval = dap_find_ap(swjdp, AP_TYPE_APB_AP, &armv7a->debug_ap);
-	if (retval != ERROR_OK) {
-		LOG_ERROR("Could not find APB-AP for debug access");
-		return retval;
+	if (cortex_a->apsel >= 0) {
+		LOG_DEBUG("Select APB-AP 0x%" PRIx32, cortex_a->apsel);
+		dap_ap_select(swjdp, cortex_a->apsel);
+		armv7a->debug_ap = cortex_a->apsel;
+	} else {
+		/* Search for the APB-AB - it is needed for access to debug registers */
+		retval = dap_find_ap(swjdp, AP_TYPE_APB_AP, &armv7a->debug_ap);
+		if (retval != ERROR_OK) {
+			LOG_ERROR("Could not find APB-AP for debug access");
+			return retval;
+		}
 	}
-	/* Search for the AHB-AB */
-	retval = dap_find_ap(swjdp, AP_TYPE_AHB_AP, &armv7a->memory_ap);
-	if (retval != ERROR_OK) {
-		/* AHB-AP not found - use APB-AP */
-		LOG_DEBUG("Could not find AHB-AP - using APB-AP for memory access");
-		armv7a->memory_ap_available = false;
+	if (cortex_a->memapsel >= 0) {
+		LOG_DEBUG("Select AXI-AP 0x%" PRIx32, cortex_a->memapsel);
+		dap_ap_select(swjdp, cortex_a->memapsel);
+		armv7a->memory_ap = cortex_a->memapsel;
 	} else {
-		armv7a->memory_ap_available = true;
+		/* Search for the AXI-AB */
+		retval = dap_find_ap(swjdp, AP_TYPE_AXI_AP, &armv7a->memory_ap);
+		if (retval != ERROR_OK) {
+			/* AXI-AP not found - use AHB-AP */
+			LOG_DEBUG("Could not find AXI-AP - Search for the AHB-AB");
+			retval = dap_find_ap(swjdp, AP_TYPE_AHB_AP, &armv7a->memory_ap);
+		}
+		if (retval != ERROR_OK) {
+			/* AHB-AP not found - use APB-AP */
+			LOG_DEBUG("Could not find AXI-AP - using AHB-AP for memory access");
+			armv7a->memory_ap_available = false;
+		} else {
+			armv7a->memory_ap_available = true;
+		}
 	}
 
-
 	if (!target->dbgbase_set) {
 		uint32_t dbgbase;
 		/* Get ROM Table base */
@@ -3104,6 +3120,16 @@ static int cortex_a_target_create(struct target *target, Jim_Interp *interp)
 
 	cortex_a->armv7a_common.is_armv7r = false;
 
+	if (target->private_config != NULL) {
+		struct adiv5_private_config *pc =
+				(struct adiv5_private_config *)target->private_config;
+		cortex_a->apsel = pc->ap_num;
+		cortex_a->memapsel = pc->memap_num;
+	} else {
+		cortex_a->apsel = -1;
+		cortex_a->memapsel = -1;
+	}
+
 	return cortex_a_init_arch_info(target, cortex_a, target->tap);
 }
 
@@ -3113,10 +3139,19 @@ static int cortex_r4_target_create(struct target *target, Jim_Interp *interp)
 
 	cortex_a->armv7a_common.is_armv7r = true;
 
+	if (target->private_config != NULL) {
+		struct adiv5_private_config *pc =
+				(struct adiv5_private_config *)target->private_config;
+		cortex_a->apsel = pc->ap_num;
+		cortex_a->memapsel = pc->memap_num;
+	} else {
+		cortex_a->apsel = -1;
+		cortex_a->memapsel = -1;
+	}
+
 	return cortex_a_init_arch_info(target, cortex_a, target->tap);
 }
 
-
 static int cortex_a_mmu(struct target *target, int *enabled)
 {
 	if (target->state != TARGET_HALTED) {
@@ -3153,6 +3188,18 @@ done:
 	return retval;
 }
 
+static void cortex_a_deinit_target(struct target *target)
+{
+	struct cortex_a_common *cortex_a = target_to_cortex_a(target);
+	struct arm_dpm *dpm = &cortex_a->armv7a_common.dpm;
+
+	free(cortex_a->brp_list);
+	free(dpm->dbp);
+	free(dpm->dwp);
+	free(target->private_config);
+	free(cortex_a);
+}
+
 COMMAND_HANDLER(cortex_a_handle_cache_info_command)
 {
 	struct target *target = get_current_target(CMD_CTX);
@@ -3439,6 +3486,8 @@ struct target_type cortexr4_target = {
 
 	.commands = cortex_r4_command_handlers,
 	.target_create = cortex_r4_target_create,
+	.target_jim_configure = adiv5_jim_configure,
 	.init_target = cortex_a_init_target,
 	.examine = cortex_a_examine,
+	.deinit_target = cortex_a_deinit_target,
 };
diff --git a/src/target/cortex_a.h b/src/target/cortex_a.h
index 93d9b28..b41e6cf 100644
--- a/src/target/cortex_a.h
+++ b/src/target/cortex_a.h
@@ -100,6 +100,8 @@ struct cortex_a_common {
 
     struct armv7a_common armv7a_common;
 
+    int apsel;
+    int memapsel;
 };
 
 static inline struct cortex_a_common *
diff --git a/src/target/target.c b/src/target/target.c
index 4ea445f..09589f8 100644
--- a/src/target/target.c
+++ b/src/target/target.c
@@ -5274,6 +5274,7 @@ static int target_create(Jim_GetOptInfo *goi)
 
 	if (e != JIM_OK) {
 		free(target->type);
+		free(target->private_config);
 		free(target);
 		return e;
 	}
diff --git a/src/target/target.h b/src/target/target.h
index 7471c1b..ece51ee 100644
--- a/src/target/target.h
+++ b/src/target/target.h
@@ -172,6 +172,7 @@ struct target {
 	struct debug_msg_receiver *dbgmsg;	/* list of debug message receivers */
 	uint32_t dbg_msg_enabled;			/* debug message status */
 	void *arch_info;					/* architecture specific information */
+	void *private_config;				/* pointer to target specific config data (for jim_configure hook) */
 	struct target *next;				/* next target in list */
 
 	int display;						/* display async info in telnet session. Do not display
-- 
2.7.4

